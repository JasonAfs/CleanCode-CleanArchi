// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  firstName      String
  lastName       String
  hashedPassword String
  role           UserRole
  companyId      String?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  company        Company?       @relation(fields: [companyId], references: [id])
  dealership     Dealership?    @relation(fields: [dealershipId], references: [id])
  dealershipId   String?
  refreshTokens  RefreshToken[]

  @@map("users")
}

model Company {
  id                 String       @id @default(uuid())
  name               String
  registrationNumber String       @unique
  street             String
  city               String
  postalCode         String
  country            String
  phone              String
  email              String
  isActive           Boolean      @default(true)
  createdAt          DateTime     @default(now())
  updatedAt          DateTime     @updatedAt
  employees          User[]
  motorcycles        Motorcycle[]

  createdByDealershipId   String?
  createdByDealership     Dealership?               @relation(fields: [createdByDealershipId], references: [id])
  MaintenanceNotification MaintenanceNotification[]

  @@map("companies")
}

model Dealership {
  id                      String                    @id @default(uuid())
  name                    String                    @unique
  street                  String
  city                    String
  postalCode              String
  country                 String
  phone                   String
  email                   String
  isActive                Boolean                   @default(true)
  createdAt               DateTime                  @default(now())
  updatedAt               DateTime                  @updatedAt
  employees               User[]
  Company                 Company[]
  motorcycles             Motorcycle[]
  Maintenance             Maintenance[]
  MaintenanceNotification MaintenanceNotification[]
  stocks                  DealershipStock[]

  @@map("dealerships")
}

model Motorcycle {
  id        String           @id @default(uuid())
  vin       String           @unique
  modelType MotorcycleModel
  year      Int
  color     String
  mileage   Int
  status    MotorcycleStatus @default(AVAILABLE)
  isActive  Boolean          @default(true)

  // Holder
  dealershipId String?
  dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  companyId    String?
  company      Company?    @relation(fields: [companyId], references: [id])
  assignedAt   DateTime    @default(now())

  // Relation avec Maintenance
  maintenances             Maintenance[]
  maintenanceNotifications MaintenanceNotification[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("motorcycles")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

model Maintenance {
  id             String                     @id @default(uuid())
  type           MaintenanceType
  status         MaintenanceStatus          @default(PLANNED)
  description    String
  mileage        Int
  scheduledDate  DateTime
  completedDate  DateTime?
  usedSpareParts MaintenanceUsedSparePart[]

  // Relations
  motorcycleId String
  motorcycle   Motorcycle @relation(fields: [motorcycleId], references: [id])
  dealershipId String
  dealership   Dealership @relation(fields: [dealershipId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenances")
}

model MaintenanceNotification {
  id      String  @id @default(uuid())
  message String
  isRead  Boolean @default(false)

  // Relations
  motorcycleId String
  motorcycle   Motorcycle @relation(fields: [motorcycleId], references: [id])
  dealershipId String
  dealership   Dealership @relation(fields: [dealershipId], references: [id])
  companyId    String?
  company      Company?   @relation(fields: [companyId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("maintenance_notifications")
}

model SparePart {
  id               String            @id @default(uuid())
  reference        String            @unique
  name             String
  category         SparePartCategory
  description      String
  manufacturer     String
  compatibleModels String[]
  minimumThreshold Int
  unitPrice        Float
  isActive         Boolean           @default(true)

  // Relations
  stocks            DealershipStock[]
  usedInMaintenance MaintenanceUsedSparePart[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("spare_parts")
}

model DealershipStock {
  id           String @id @default(uuid())
  dealershipId String
  sparePartId  String
  quantity     Int
  threshold    Int

  // Relations
  dealership     Dealership       @relation(fields: [dealershipId], references: [id])
  sparePart      SparePart        @relation(fields: [sparePartId], references: [id])
  stockMovements StockMovement[]
  orders         SparePartOrder[]

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([dealershipId, sparePartId])
  @@map("dealership_stocks")
}

model StockMovement {
  id                String            @id @default(uuid())
  dealershipStockId String
  quantity          Int
  type              StockMovementType
  reason            String

  // Relations
  dealershipStock DealershipStock @relation(fields: [dealershipStockId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())

  @@map("stock_movements")
}

model SparePartOrder {
  id                    String      @id @default(uuid())
  dealershipStockId     String
  quantity              Int
  unitPrice             Float
  status                OrderStatus @default(PENDING)
  estimatedDeliveryDate DateTime?
  deliveredAt           DateTime?

  // Relations
  dealershipStock DealershipStock @relation(fields: [dealershipStockId], references: [id])

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("spare_part_orders")
}

model MaintenanceUsedSparePart {
  id            String   @id @default(uuid())
  maintenanceId String
  sparePartId   String
  quantity      Int
  unitPrice     Float
  totalPrice    Float
  usedAt        DateTime @default(now())

  // Relations
  maintenance Maintenance @relation(fields: [maintenanceId], references: [id])
  sparePart   SparePart   @relation(fields: [sparePartId], references: [id])

  @@map("maintenance_used_spare_parts")
}

enum UserRole {
  TRIUMPH_ADMIN
  DEALERSHIP_MANAGER
  DEALERSHIP_EMPLOYEE
  DEALERSHIP_TECHNICIAN
  COMPANY_MANAGER
  COMPANY_DRIVER
  CLIENT
}

enum MotorcycleModel {
  STREET_TRIPLE_765_RS
  TIGER_900_RALLY_PRO
  SPEED_TRIPLE_1200_RS
  TRIDENT_660
  ROCKET_3_GT
  BONNEVILLE_T120
  TIGER_1200_GT_EXPLORER
  SCRAMBLER_1200_XE
}

enum MotorcycleStatus {
  AVAILABLE // Disponible pour attribution à une entreprise
  IN_USE // Utilisée par une entreprise
  MAINTENANCE // En maintenance
  IN_TRANSIT // En transit entre concessions
  OUT_OF_SERVICE // Hors service (accident, panne majeure...)
}

enum MaintenanceType {
  PREVENTIVE
  CORRECTIVE
  WARRANTY
}

enum MaintenanceStatus {
  PLANNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum SparePartCategory {
  FILTER
  TIRE
  BRAKE
  ENGINE
  TRANSMISSION
  ELECTRICAL
  OTHER
}

enum StockMovementType {
  IN
  OUT
}

enum OrderStatus {
  PENDING
  CONFIRMED
  SHIPPED
  DELIVERED
  CANCELLED
}
