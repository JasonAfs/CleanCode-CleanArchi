// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  firstName      String
  lastName       String
  hashedPassword String
  role           UserRole
  companyId      String?
  isActive       Boolean        @default(true)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  company        Company?       @relation(fields: [companyId], references: [id])
  dealership     Dealership?    @relation(fields: [dealershipId], references: [id])
  dealershipId   String?
  refreshTokens  RefreshToken[]

  @@map("users")
}

model Company {
  id                    String              @id @default(uuid())
  name                  String
  registrationNumber    String              @unique
  street                String
  city                  String
  postalCode            String
  country               String
  phone                 String
  email                 String
  isActive              Boolean             @default(true)
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  employees             User[]
  motorcycles Motorcycle[]
  
  createdByDealershipId String?
  createdByDealership   Dealership?         @relation(fields: [createdByDealershipId], references: [id])

  @@map("companies")
}

model Dealership {
  id          String       @id @default(uuid())
  name        String       @unique
  street      String
  city        String
  postalCode  String
  country     String
  phone       String
  email       String
  isActive    Boolean      @default(true)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  employees   User[]
  Company     Company[]
  motorcycles Motorcycle[]

  @@map("dealerships")
}

model Motorcycle {
  id        String   @id
  vin       String   @unique
  modelType MotorcycleModel
  year      Int
  color     String
  mileage   Int
  status    MotorcycleStatus @default(AVAILABLE)
  isActive  Boolean  @default(true)
  
  // Holder
  dealershipId String?
  dealership   Dealership? @relation(fields: [dealershipId], references: [id])
  companyId    String?
  company      Company?    @relation(fields: [companyId], references: [id])
  assignedAt   DateTime    @default(now())

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("motorcycles")
}

model RefreshToken {
  id        String   @id @default(uuid())
  token     String   @unique
  userId    String
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id])

  @@map("refresh_tokens")
}

enum UserRole {
  TRIUMPH_ADMIN
  DEALERSHIP_MANAGER
  DEALERSHIP_EMPLOYEE
  DEALERSHIP_TECHNICIAN
  COMPANY_MANAGER
  COMPANY_DRIVER
  CLIENT
}

enum MotorcycleModel {
  STREET_TRIPLE_765_RS
  TIGER_900_RALLY_PRO
  SPEED_TRIPLE_1200_RS
  TRIDENT_660
  ROCKET_3_GT
  BONNEVILLE_T120
  TIGER_1200_GT_EXPLORER
  SCRAMBLER_1200_XE
}

enum MotorcycleStatus {
  AVAILABLE
  IN_USE
  IN_MAINTENANCE
  IN_TRANSIT
  OUT_OF_SERVICE
}
